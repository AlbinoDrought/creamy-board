package tmpl

import (
	"fmt"
	"go.albinodrought.com/creamy-board/internal/repo"
)

// formatters:

func humanizeBytes(b int) string {
	const unit = 1000
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := unit, 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.2f %cB", float64(b)/float64(div), "kMGTPE"[exp])
}

func nameFile(thread *repo.Thread, post *repo.Post, file *repo.File) string {
	return fmt.Sprintf(
		"%v-%v-%v.%v", 
		thread.ID,
		post.ID,
		file.Index,
		file.Extension,
	)
}

func linkBoard(board *repo.Board) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/", board.Slug))
}
func linkFile(board *repo.Board, thread *repo.Thread, post *repo.Post, file *repo.File) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf(
		"/%v/src/%v",
		board.Slug,
		nameFile(thread, post, file),
	))
}
func linkThreadShow(board *repo.Board, thread *repo.Thread) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html", board.Slug, thread.ID))
}
func linkPostShow(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html#%v", board.Slug, thread.ID, post.ID))
}
func linkPostQuote(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html#q%v", board.Slug, thread.ID, post.ID))
}

func textBoard(board *repo.Board) string {
	return fmt.Sprintf("/%v/ - %v", board.Slug, board.Title)
}
func textThread(board *repo.Board, post *repo.Post) string {
	return fmt.Sprintf("/%v/ - %v", board.Slug, post.Subject)
}

// components:

templ postHead(board *repo.Board, thread *repo.Thread, post *repo.Post) {
	if post.Subject != "" {
		<span class="post__subject">{ post.Subject }</span><wbr />
		&nbsp;
	}
	<span class="post__author">{ post.Author }</span><wbr />
	&nbsp;
	<span class="post__date">{ post.CreatedAt }</span><wbr />
	&nbsp;
	<a class="post__link-show" href={ linkPostShow(board, thread, post) }>No.</a>
	&nbsp;
	<a class="post__link-quote" href={ linkPostQuote(board, thread, post) }>{ fmt.Sprintf("%v", post.ID) }</a>
}

templ threadHead(board *repo.Board, thread *repo.Thread, post *repo.Post, inThread bool) {
	@postHead(board, thread, post)
	&nbsp;
	if (!inThread) {
		<a class="thread__link-reply" href={ linkThreadShow(board, thread) }>[Reply]</a>
	}
}

templ fileFull(board *repo.Board, thread *repo.Thread, post *repo.Post, file *repo.File) {
	<div class="file">
		<div class="file__info">
			File:
			<a href={ linkFile(board, thread, post, file) } target="_blank">
				{ nameFile(thread, post, file) }
			</a>&nbsp;(<span>
				{ humanizeBytes(file.Bytes) }
			</span><wbr />,
			<a href={ linkFile(board, thread, post, file) } download={ file.OriginalName } title="Save as original filename">
				{ file.OriginalName }
			</a><wbr />)
		</div>
		<div class="file__img-container">
			<a href={ linkFile(board, thread, post, file) } target="_blank">
				<img class="file__img" src={ string(linkFile(board, thread, post, file)) } />
			</a>
		</div>
	</div>
}

func postFilesClass(files []repo.File) string {
	if len(files) <= 1 {
		return "post__files"
	}

	return "post__files post__files--multi"
}

templ postFilesFull(board *repo.Board, thread *repo.Thread, post *repo.Post, files []repo.File) {
	<div class={ postFilesClass(files) }>
		for _, file := range post.Files {
			@fileFull(board, thread, post, &file)
		}
	</div>
}

templ postFull(board *repo.Board, thread *repo.Thread, post *repo.Post) {
	<div class="post">
		<div class="post__content">
			<div class="post__head">
				@postHead(board, thread, post)
			</div>
			@postFilesFull(board, thread, post, post.Files)
			<div class="post__body">
				{ post.Body }
			</div>
		</div>
	</div>
}

templ threadFull(board *repo.Board, thread *repo.Thread, main *repo.Post, other []repo.Post, inThread bool) {
	<div class="thread">
		<div class="post post--op">
		<div class="post__content">
				<div class="post__head">
					@threadHead(board, thread, main, inThread)
				</div>
				@postFilesFull(board, thread, main, main.Files)
				<div class="post__body">
					{ main.Body }
				</div>
			</div>
		</div>
		<div class="thread__posts">
			for _, post := range other {
				@postFull(board, thread, &post)
			}
		</div>
	</div>
}

// wrappers:

templ page(title string, description string) {
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
      <meta name="viewport" content="width=device-width,initial-scale=1.0" />
      <meta name="description" content="{ description }" />
      <link rel="icon" href="/favicon.ico" />
      <title>{ title }</title>
			<link href="/css/main.css" rel="stylesheet" />
    </head>
    <body>
      { children... }
    </body>
  </html>
}

templ wrapperBoard(board *repo.Board) {
	<h1 class="board__title">{ textBoard(board) }</h1>
	<h2 class="board__tag">{ board.Tagline }</h2>
	<hr />
	{ children... }
}

// entrypoints:

templ ListBoards(boards []repo.Board) {
	@page("Creamy Board", "the world is your oyster") {
		<ul>
			for _, board := range boards {
				<a href={ linkBoard(&board) }>{ textBoard(&board) }</a>
			}
		</ul>
	}
}

templ ShowBoardAndRecents(brt *repo.BoardRecentThreads) {
	@page(textBoard(&brt.Board), brt.Board.Tagline) {
		@wrapperBoard(&brt.Board) {
			for _, thread := range brt.RecentThreads {
				@threadFull(&brt.Board, &thread.Thread, &thread.MainPost, thread.RecentPosts, false)
			}
		}
	}
}

templ ShowFullThread(bft *repo.BoardFullThread) {
	@page(textThread(&bft.Board, &bft.FullThread.MainPost), bft.FullThread.MainPost.Body) {
		@wrapperBoard(&bft.Board) {
			@threadFull(&bft.Board, &bft.FullThread.Thread, &bft.FullThread.MainPost, bft.FullThread.AllPosts, true)
		}
	}
}
