// Code generated by templ@v0.2.304 DO NOT EDIT.

package tmpl

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// GoExpression
import (
	"fmt"
	"go.albinodrought.com/creamy-board/internal/markup"
	"go.albinodrought.com/creamy-board/internal/repo"
)

// formatters:

func humanizeBytes(b int) string {
	const unit = 1000
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := unit, 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.2f %cB", float64(b)/float64(div), "kMGTPE"[exp])
}

func nameFile(thread *repo.Thread, post *repo.Post, file *repo.File) string {
	return fmt.Sprintf(
		"%v-%v-%v.%v",
		thread.ID,
		post.ID,
		file.Index,
		file.Extension,
	)
}
func nameFileThumb(thread *repo.Thread, post *repo.Post, file *repo.File) string {
	return fmt.Sprintf(
		"%v-%v-%v.%v",
		thread.ID,
		post.ID,
		file.Index,
		file.ThumbExtension,
	)
}

func linkBoardPage(board *repo.Board, page int) templ.SafeURL {
	if page == 1 {
		return templ.SafeURL(fmt.Sprintf("/%v/index.html", board.Slug))
	} else {
		return templ.SafeURL(fmt.Sprintf("/%v/%v.html", board.Slug, page))
	}
}
func linkBoard(board *repo.Board) templ.SafeURL {
	return linkBoardPage(board, 1)
}
func linkFile(board *repo.Board, thread *repo.Thread, post *repo.Post, file *repo.File) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf(
		"/%v/src/%v",
		board.Slug,
		nameFile(thread, post, file),
	))
}
func linkFileThumb(board *repo.Board, thread *repo.Thread, post *repo.Post, file *repo.File) templ.SafeURL {
	if file.ThumbInternalPath != "" {
		return templ.SafeURL(fmt.Sprintf(
			"/%v/thumb/%v",
			board.Slug,
			nameFileThumb(thread, post, file),
		))
	}

	return templ.SafeURL("/img/default-thumb.png")
}
func linkThreadShow(board *repo.Board, thread *repo.Thread) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html", board.Slug, thread.ID))
}
func linkPostShow(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html#%v", board.Slug, thread.ID, post.ID))
}
func linkPostQuote(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/%v/res/%v.html#q%v", board.Slug, thread.ID, post.ID))
}

func textBoard(board *repo.Board) string {
	return fmt.Sprintf("/%v/ - %v", board.Slug, board.Title)
}
func textThread(board *repo.Board, post *repo.Post) string {
	return fmt.Sprintf("/%v/ - %v", board.Slug, post.Subject)
}

// components:

func postHead(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// If
		if post.Subject != "" {
			// Element (standard)
			_, err = templBuffer.WriteString("<span")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"post__subject\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// StringExpression
			var var_2 string = post.Subject
			_, err = templBuffer.WriteString(templ.EscapeString(var_2))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<wbr>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_3 := `&nbsp;`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<span")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__author\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_4 string = post.Author
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<wbr>")
		if err != nil {
			return err
		}
		// Text
		var_5 := `&nbsp;`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<span")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__date\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_6 string = post.CreatedAt
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<wbr>")
		if err != nil {
			return err
		}
		// Text
		var_7 := `&nbsp;`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<a")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__link-show\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" href=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_8 templ.SafeURL = linkPostShow(board, thread, post)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_8)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_9 := `No.`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		// Text
		var_10 := `&nbsp;`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<a")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__link-quote\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" href=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_11 templ.SafeURL = linkPostQuote(board, thread, post)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_11)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_12 string = fmt.Sprintf("%v", post.ID)
		_, err = templBuffer.WriteString(templ.EscapeString(var_12))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func postBody(body string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// For
		for _, node := range markup.Parse(body) {
			// If
			if node.Quoted {
				// Element (standard)
				_, err = templBuffer.WriteString("<span")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" class=\"quote\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// StringExpression
				var var_14 string = node.Content
				_, err = templBuffer.WriteString(templ.EscapeString(var_14))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span>")
				if err != nil {
					return err
				}
			} else {
				// Element (standard)
				_, err = templBuffer.WriteString("<span>")
				if err != nil {
					return err
				}
				// StringExpression
				var var_15 string = node.Content
				_, err = templBuffer.WriteString(templ.EscapeString(var_15))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span>")
				if err != nil {
					return err
				}
			}
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func threadHead(board *repo.Board, thread *repo.Thread, post *repo.Post, inThread bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// TemplElement
		err = postHead(board, thread, post).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		// Text
		var_17 := `&nbsp;`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		// If
		if !inThread {
			// Element (standard)
			_, err = templBuffer.WriteString("<a")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"thread__link-reply\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" href=")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			var var_18 templ.SafeURL = linkThreadShow(board, thread)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_18)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Text
			var_19 := `[Reply]`
			_, err = templBuffer.WriteString(var_19)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func fileFull(board *repo.Board, thread *repo.Thread, post *repo.Post, file *repo.File) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"file\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"file__info\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_21 := `File:`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		// Whitespace (normalised)
		_, err = templBuffer.WriteString(` `)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<a")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" href=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_22 templ.SafeURL = linkFile(board, thread, post, file)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_22)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" target=\"_blank\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_23 string = nameFile(thread, post, file)
		_, err = templBuffer.WriteString(templ.EscapeString(var_23))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		// Text
		var_24 := `&nbsp;(`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<span>")
		if err != nil {
			return err
		}
		// StringExpression
		var var_25 string = humanizeBytes(file.Bytes)
		_, err = templBuffer.WriteString(templ.EscapeString(var_25))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<wbr>")
		if err != nil {
			return err
		}
		// Text
		var_26 := `,`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		// Whitespace (normalised)
		_, err = templBuffer.WriteString(` `)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<a")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" href=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_27 templ.SafeURL = linkFile(board, thread, post, file)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_27)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" download=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(file.OriginalName))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" title=\"Save as original filename\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_28 string = file.OriginalName
		_, err = templBuffer.WriteString(templ.EscapeString(var_28))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<wbr>")
		if err != nil {
			return err
		}
		// Text
		var_29 := `)`
		_, err = templBuffer.WriteString(var_29)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"file__img-container\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<a")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" data-src-expand-handler")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" href=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		var var_30 templ.SafeURL = linkFile(board, thread, post, file)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_30)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" target=\"_blank\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<img")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"file__img\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" src=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(string(linkFileThumb(board, thread, post, file))))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" data-src-expand-to=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(string(linkFile(board, thread, post, file))))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

// GoExpression
func postFilesClass(files []repo.File) string {
	if len(files) <= 1 {
		return "post__files"
	}

	return "post__files post__files--multi"
}

func postFilesFull(board *repo.Board, thread *repo.Thread, post *repo.Post, files []repo.File) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_31 := templ.GetChildren(ctx)
		if var_31 == nil {
			var_31 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		// Element CSS
		var var_32 = []any{postFilesClass(files)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_32...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_32).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// For
		for _, file := range post.Files {
			// TemplElement
			err = fileFull(board, thread, post, &file).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func postFull(board *repo.Board, thread *repo.Thread, post *repo.Post) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_33 := templ.GetChildren(ctx)
		if var_33 == nil {
			var_33 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" id=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%v", post.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" class=\"post\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__content\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__head\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// TemplElement
		err = postHead(board, thread, post).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		// TemplElement
		err = postFilesFull(board, thread, post, post.Files).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__body\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// TemplElement
		err = postBody(post.Body).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func threadFull(board *repo.Board, thread *repo.Thread, main *repo.Post, other []repo.Post, inThread bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_34 := templ.GetChildren(ctx)
		if var_34 == nil {
			var_34 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"thread\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" id=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%v", main.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" class=\"post post--op\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__content\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__head\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// TemplElement
		err = threadHead(board, thread, main, inThread).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		// TemplElement
		err = postFilesFull(board, thread, main, main.Files).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"post__body\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// TemplElement
		err = postBody(main.Body).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"thread__posts\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// For
		for _, post := range other {
			// TemplElement
			err = postFull(board, thread, &post).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func postForm(errorText string, requireFields bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_35 := templ.GetChildren(ctx)
		if var_35 == nil {
			var_35 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<form")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" method=\"POST\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" enctype=\"multipart/form-data\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<table")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"form\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<tbody>")
		if err != nil {
			return err
		}
		// If
		if errorText != "" {
			// Element (standard)
			_, err = templBuffer.WriteString("<tr")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"form__error\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<th>")
			if err != nil {
				return err
			}
			// Text
			var_36 := `Error`
			_, err = templBuffer.WriteString(var_36)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<td>")
			if err != nil {
				return err
			}
			// StringExpression
			var var_37 string = errorText
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</tr>")
			if err != nil {
				return err
			}
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<label")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" for=\"author\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_38 := `Name`
		_, err = templBuffer.WriteString(var_38)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<td>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"text\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" id=\"author\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" name=\"author\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</td>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<label")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" for=\"subject\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_39 := `Subject`
		_, err = templBuffer.WriteString(var_39)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<td>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"text\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" id=\"subject\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" name=\"subject\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<button")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"submit\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_40 := `Post`
		_, err = templBuffer.WriteString(var_40)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</td>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<th>")
		if err != nil {
			return err
		}
		// Text
		var_41 := `Comment`
		_, err = templBuffer.WriteString(var_41)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<td>")
		if err != nil {
			return err
		}
		// If
		if requireFields {
			// Element (standard)
			_, err = templBuffer.WriteString("<textarea")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" required")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"body\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" rows=\"5\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" cols=\"27\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</textarea>")
			if err != nil {
				return err
			}
		} else {
			// Element (standard)
			_, err = templBuffer.WriteString("<textarea")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" name=\"body\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" rows=\"5\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" cols=\"27\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</textarea>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</td>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<label")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" for=\"file1\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Text
		var_42 := `File`
		_, err = templBuffer.WriteString(var_42)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<td>")
		if err != nil {
			return err
		}
		// If
		if requireFields {
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" required")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" type=\"file\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"file1\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"file1\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
		} else {
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"file\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"file1\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"file1\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
		}
		// Element (void)
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"file\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" id=\"file2\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" name=\"file2\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"file\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" id=\"file3\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" name=\"file2\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</td>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tbody>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</table>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

// GoExpression
// wrappers:

func page(title string, description string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_43 := templ.GetChildren(ctx)
		if var_43 == nil {
			var_43 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// DocType
		_, err = templBuffer.WriteString(`<!doctype html>`)
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<html")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" lang=\"en\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<head>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<meta")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" charset=\"utf-8\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<meta")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" http-equiv=\"X-UA-Compatible\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" content=\"IE=edge\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<meta")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" name=\"viewport\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" content=\"width=device-width,initial-scale=1.0\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<meta")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" name=\"description\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" content=\"{ description }\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<link")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" rel=\"icon\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" href=\"/favicon.ico\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<title>")
		if err != nil {
			return err
		}
		// StringExpression
		var var_44 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_44))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title>")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<link")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" href=\"/css/main.css\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" rel=\"stylesheet\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</head>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		// Children
		err = var_43.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func wrapperBoard(board *repo.Board) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_45 := templ.GetChildren(ctx)
		if var_45 == nil {
			var_45 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<h1")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"board__title\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_46 string = textBoard(board)
		_, err = templBuffer.WriteString(templ.EscapeString(var_46))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<h2")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"board__tag\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// StringExpression
		var var_47 string = board.Tagline
		_, err = templBuffer.WriteString(templ.EscapeString(var_47))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<script")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"text/javascript\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" src=\"/js/board.js\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script>")
		if err != nil {
			return err
		}
		// Children
		err = var_45.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

// GoExpression
// entrypoints:

func ListBoards(boards []repo.Board) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_48 := templ.GetChildren(ctx)
		if var_48 == nil {
			var_48 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// TemplElement
		var_49 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<ul>")
			if err != nil {
				return err
			}
			// For
			for _, board := range boards {
				// Element (standard)
				_, err = templBuffer.WriteString("<a")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" href=")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
				var var_50 templ.SafeURL = linkBoard(&board)
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_50)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// StringExpression
				var var_51 string = textBoard(&board)
				_, err = templBuffer.WriteString(templ.EscapeString(var_51))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</ul>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page("Creamy Board", "the world is your oyster").Render(templ.WithChildren(ctx, var_49), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func ShowBoardAndRecents(brt *repo.BoardRecentThreads, pageNum int, errorText string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_52 := templ.GetChildren(ctx)
		if var_52 == nil {
			var_52 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// TemplElement
		var_53 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			// TemplElement
			var_54 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				// TemplElement
				err = postForm(errorText, true).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (void)
				_, err = templBuffer.WriteString("<hr>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// For
				for _, thread := range brt.RecentThreads {
					// TemplElement
					err = threadFull(&brt.Board, &thread.Thread, &thread.MainPost, thread.RecentPosts, false).Render(ctx, templBuffer)
					if err != nil {
						return err
					}
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<div")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" class=\"paging\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// If
				if pageNum <= 1 {
					// Element (standard)
					_, err = templBuffer.WriteString("<span>")
					if err != nil {
						return err
					}
					// Text
					var_55 := `Previous&nbsp;`
					_, err = templBuffer.WriteString(var_55)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span>")
					if err != nil {
						return err
					}
				} else {
					// Element (standard)
					_, err = templBuffer.WriteString("<form")
					if err != nil {
						return err
					}
					// Element Attributes
					_, err = templBuffer.WriteString(" method=\"GET\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" action=")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(string(linkBoardPage(&brt.Board, pageNum-1))))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(">")
					if err != nil {
						return err
					}
					// Element (standard)
					_, err = templBuffer.WriteString("<button")
					if err != nil {
						return err
					}
					// Element Attributes
					_, err = templBuffer.WriteString(" type=\"submit\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(">")
					if err != nil {
						return err
					}
					// Text
					var_56 := `Previous`
					_, err = templBuffer.WriteString(var_56)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</button>")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</form>")
					if err != nil {
						return err
					}
				}
				// For
				for i := pageNum - 3; i < pageNum; i++ {
					// If
					if i >= 1 {
						// Element (standard)
						_, err = templBuffer.WriteString("<span>")
						if err != nil {
							return err
						}
						// Text
						var_57 := `[`
						_, err = templBuffer.WriteString(var_57)
						if err != nil {
							return err
						}
						// Element (standard)
						_, err = templBuffer.WriteString("<a")
						if err != nil {
							return err
						}
						// Element Attributes
						_, err = templBuffer.WriteString(" href=")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\"")
						if err != nil {
							return err
						}
						var var_58 templ.SafeURL = linkBoardPage(&brt.Board, i)
						_, err = templBuffer.WriteString(templ.EscapeString(string(var_58)))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\"")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString(">")
						if err != nil {
							return err
						}
						// StringExpression
						var var_59 string = fmt.Sprintf("%v", i)
						_, err = templBuffer.WriteString(templ.EscapeString(var_59))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</a>")
						if err != nil {
							return err
						}
						// Text
						var_60 := `]&nbsp;`
						_, err = templBuffer.WriteString(var_60)
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</span>")
						if err != nil {
							return err
						}
					}
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<span>")
				if err != nil {
					return err
				}
				// Text
				var_61 := `[`
				_, err = templBuffer.WriteString(var_61)
				if err != nil {
					return err
				}
				// StringExpression
				var var_62 string = fmt.Sprintf("%v", pageNum)
				_, err = templBuffer.WriteString(templ.EscapeString(var_62))
				if err != nil {
					return err
				}
				// Text
				var_63 := `]`
				_, err = templBuffer.WriteString(var_63)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span>")
				if err != nil {
					return err
				}
				// For
				for i := pageNum + 1; i < pageNum+3; i++ {
					// If
					if i <= brt.Pages {
						// Element (standard)
						_, err = templBuffer.WriteString("<span>")
						if err != nil {
							return err
						}
						// Text
						var_64 := `&nbsp;[`
						_, err = templBuffer.WriteString(var_64)
						if err != nil {
							return err
						}
						// Element (standard)
						_, err = templBuffer.WriteString("<a")
						if err != nil {
							return err
						}
						// Element Attributes
						_, err = templBuffer.WriteString(" href=")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\"")
						if err != nil {
							return err
						}
						var var_65 templ.SafeURL = linkBoardPage(&brt.Board, i)
						_, err = templBuffer.WriteString(templ.EscapeString(string(var_65)))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("\"")
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString(">")
						if err != nil {
							return err
						}
						// StringExpression
						var var_66 string = fmt.Sprintf("%v", i)
						_, err = templBuffer.WriteString(templ.EscapeString(var_66))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</a>")
						if err != nil {
							return err
						}
						// Text
						var_67 := `]`
						_, err = templBuffer.WriteString(var_67)
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</span>")
						if err != nil {
							return err
						}
					}
				}
				// If
				if pageNum >= brt.Pages {
					// Element (standard)
					_, err = templBuffer.WriteString("<span>")
					if err != nil {
						return err
					}
					// Text
					var_68 := `&nbsp;Next`
					_, err = templBuffer.WriteString(var_68)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span>")
					if err != nil {
						return err
					}
				} else {
					// Element (standard)
					_, err = templBuffer.WriteString("<form")
					if err != nil {
						return err
					}
					// Element Attributes
					_, err = templBuffer.WriteString(" method=\"GET\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" action=")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(string(linkBoardPage(&brt.Board, pageNum+1))))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(">")
					if err != nil {
						return err
					}
					// Element (standard)
					_, err = templBuffer.WriteString("<button")
					if err != nil {
						return err
					}
					// Element Attributes
					_, err = templBuffer.WriteString(" type=\"submit\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(">")
					if err != nil {
						return err
					}
					// Text
					var_69 := `Next`
					_, err = templBuffer.WriteString(var_69)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</button>")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</form>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = wrapperBoard(&brt.Board).Render(templ.WithChildren(ctx, var_54), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page(textBoard(&brt.Board), brt.Board.Tagline).Render(templ.WithChildren(ctx, var_53), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func ShowFullThread(bft *repo.BoardFullThread, errorText string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_70 := templ.GetChildren(ctx)
		if var_70 == nil {
			var_70 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// TemplElement
		var_71 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			// TemplElement
			var_72 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<div")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" class=\"thread-return-container\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<div")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" class=\"thread-return\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// Text
				var_73 := `Posting mode: Reply`
				_, err = templBuffer.WriteString(var_73)
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Text
				var_74 := `&nbsp;`
				_, err = templBuffer.WriteString(var_74)
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<a")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" href=")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
				var var_75 templ.SafeURL = linkBoard(&bft.Board)
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_75)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// Text
				var_76 := `[Return]`
				_, err = templBuffer.WriteString(var_76)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a>")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// TemplElement
				err = postForm(errorText, false).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<script")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" type=\"text/javascript\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" src=\"/js/thread.js\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</script>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (void)
				_, err = templBuffer.WriteString("<hr>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// TemplElement
				err = threadFull(&bft.Board, &bft.FullThread.Thread, &bft.FullThread.MainPost, bft.FullThread.AllPosts, true).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = wrapperBoard(&bft.Board).Render(templ.WithChildren(ctx, var_72), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page(textThread(&bft.Board, &bft.FullThread.MainPost), bft.FullThread.MainPost.Body).Render(templ.WithChildren(ctx, var_71), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
