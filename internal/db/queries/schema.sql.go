// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	ListBoards(ctx context.Context) ([]ListBoardsRow, error)
	// ListBoardsBatch enqueues a ListBoards query into batch to be executed
	// later by the batch.
	ListBoardsBatch(batch genericBatch)
	// ListBoardsScan scans the result of an executed ListBoardsBatch query.
	ListBoardsScan(results pgx.BatchResults) ([]ListBoardsRow, error)

	ShowBoardFromID(ctx context.Context, id int32) (ShowBoardFromIDRow, error)
	// ShowBoardFromIDBatch enqueues a ShowBoardFromID query into batch to be executed
	// later by the batch.
	ShowBoardFromIDBatch(batch genericBatch, id int32)
	// ShowBoardFromIDScan scans the result of an executed ShowBoardFromIDBatch query.
	ShowBoardFromIDScan(results pgx.BatchResults) (ShowBoardFromIDRow, error)

	ShowBoardFromSlug(ctx context.Context, slug string) (ShowBoardFromSlugRow, error)
	// ShowBoardFromSlugBatch enqueues a ShowBoardFromSlug query into batch to be executed
	// later by the batch.
	ShowBoardFromSlugBatch(batch genericBatch, slug string)
	// ShowBoardFromSlugScan scans the result of an executed ShowBoardFromSlugBatch query.
	ShowBoardFromSlugScan(results pgx.BatchResults) (ShowBoardFromSlugRow, error)

	ListActiveBoardThreads(ctx context.Context, params ListActiveBoardThreadsParams) ([]ListActiveBoardThreadsRow, error)
	// ListActiveBoardThreadsBatch enqueues a ListActiveBoardThreads query into batch to be executed
	// later by the batch.
	ListActiveBoardThreadsBatch(batch genericBatch, params ListActiveBoardThreadsParams)
	// ListActiveBoardThreadsScan scans the result of an executed ListActiveBoardThreadsBatch query.
	ListActiveBoardThreadsScan(results pgx.BatchResults) ([]ListActiveBoardThreadsRow, error)

	ListThreadRecentPosts(ctx context.Context, boardID int32, threadIds []int) ([]ListThreadRecentPostsRow, error)
	// ListThreadRecentPostsBatch enqueues a ListThreadRecentPosts query into batch to be executed
	// later by the batch.
	ListThreadRecentPostsBatch(batch genericBatch, boardID int32, threadIds []int)
	// ListThreadRecentPostsScan scans the result of an executed ListThreadRecentPostsBatch query.
	ListThreadRecentPostsScan(results pgx.BatchResults) ([]ListThreadRecentPostsRow, error)

	ShowThread(ctx context.Context, boardID int32, threadID int) (ShowThreadRow, error)
	// ShowThreadBatch enqueues a ShowThread query into batch to be executed
	// later by the batch.
	ShowThreadBatch(batch genericBatch, boardID int32, threadID int)
	// ShowThreadScan scans the result of an executed ShowThreadBatch query.
	ShowThreadScan(results pgx.BatchResults) (ShowThreadRow, error)

	ListThreadPosts(ctx context.Context, boardID int32, threadID int) ([]ListThreadPostsRow, error)
	// ListThreadPostsBatch enqueues a ListThreadPosts query into batch to be executed
	// later by the batch.
	ListThreadPostsBatch(batch genericBatch, boardID int32, threadID int)
	// ListThreadPostsScan scans the result of an executed ListThreadPostsBatch query.
	ListThreadPostsScan(results pgx.BatchResults) ([]ListThreadPostsRow, error)

	ListPostFiles(ctx context.Context, boardID int32, postIds []int) ([]ListPostFilesRow, error)
	// ListPostFilesBatch enqueues a ListPostFiles query into batch to be executed
	// later by the batch.
	ListPostFilesBatch(batch genericBatch, boardID int32, postIds []int)
	// ListPostFilesScan scans the result of an executed ListPostFilesBatch query.
	ListPostFilesScan(results pgx.BatchResults) ([]ListPostFilesRow, error)

	ListThreadFiles(ctx context.Context, boardID int32, threadID int) ([]ListThreadFilesRow, error)
	// ListThreadFilesBatch enqueues a ListThreadFiles query into batch to be executed
	// later by the batch.
	ListThreadFilesBatch(batch genericBatch, boardID int32, threadID int)
	// ListThreadFilesScan scans the result of an executed ListThreadFilesBatch query.
	ListThreadFilesScan(results pgx.BatchResults) ([]ListThreadFilesRow, error)

	ShowFile(ctx context.Context, params ShowFileParams) (ShowFileRow, error)
	// ShowFileBatch enqueues a ShowFile query into batch to be executed
	// later by the batch.
	ShowFileBatch(batch genericBatch, params ShowFileParams)
	// ShowFileScan scans the result of an executed ShowFileBatch query.
	ShowFileScan(results pgx.BatchResults) (ShowFileRow, error)

	SubmitThread(ctx context.Context, params SubmitThreadParams) (*int, error)
	// SubmitThreadBatch enqueues a SubmitThread query into batch to be executed
	// later by the batch.
	SubmitThreadBatch(batch genericBatch, params SubmitThreadParams)
	// SubmitThreadScan scans the result of an executed SubmitThreadBatch query.
	SubmitThreadScan(results pgx.BatchResults) (*int, error)

	SubmitPost(ctx context.Context, params SubmitPostParams) (*int, error)
	// SubmitPostBatch enqueues a SubmitPost query into batch to be executed
	// later by the batch.
	SubmitPostBatch(batch genericBatch, params SubmitPostParams)
	// SubmitPostScan scans the result of an executed SubmitPostBatch query.
	SubmitPostScan(results pgx.BatchResults) (*int, error)

	// the above SubmitPost query fails when no files are submitted, not sure how to hack around it, so just using diff query instead
	SubmitPostNoFiles(ctx context.Context, params SubmitPostNoFilesParams) (int, error)
	// SubmitPostNoFilesBatch enqueues a SubmitPostNoFiles query into batch to be executed
	// later by the batch.
	SubmitPostNoFilesBatch(batch genericBatch, params SubmitPostNoFilesParams)
	// SubmitPostNoFilesScan scans the result of an executed SubmitPostNoFilesBatch query.
	SubmitPostNoFilesScan(results pgx.BatchResults) (int, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, listBoardsSQL, listBoardsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListBoards': %w", err)
	}
	if _, err := p.Prepare(ctx, showBoardFromIDSQL, showBoardFromIDSQL); err != nil {
		return fmt.Errorf("prepare query 'ShowBoardFromID': %w", err)
	}
	if _, err := p.Prepare(ctx, showBoardFromSlugSQL, showBoardFromSlugSQL); err != nil {
		return fmt.Errorf("prepare query 'ShowBoardFromSlug': %w", err)
	}
	if _, err := p.Prepare(ctx, listActiveBoardThreadsSQL, listActiveBoardThreadsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListActiveBoardThreads': %w", err)
	}
	if _, err := p.Prepare(ctx, listThreadRecentPostsSQL, listThreadRecentPostsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListThreadRecentPosts': %w", err)
	}
	if _, err := p.Prepare(ctx, showThreadSQL, showThreadSQL); err != nil {
		return fmt.Errorf("prepare query 'ShowThread': %w", err)
	}
	if _, err := p.Prepare(ctx, listThreadPostsSQL, listThreadPostsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListThreadPosts': %w", err)
	}
	if _, err := p.Prepare(ctx, listPostFilesSQL, listPostFilesSQL); err != nil {
		return fmt.Errorf("prepare query 'ListPostFiles': %w", err)
	}
	if _, err := p.Prepare(ctx, listThreadFilesSQL, listThreadFilesSQL); err != nil {
		return fmt.Errorf("prepare query 'ListThreadFiles': %w", err)
	}
	if _, err := p.Prepare(ctx, showFileSQL, showFileSQL); err != nil {
		return fmt.Errorf("prepare query 'ShowFile': %w", err)
	}
	if _, err := p.Prepare(ctx, submitThreadSQL, submitThreadSQL); err != nil {
		return fmt.Errorf("prepare query 'SubmitThread': %w", err)
	}
	if _, err := p.Prepare(ctx, submitPostSQL, submitPostSQL); err != nil {
		return fmt.Errorf("prepare query 'SubmitPost': %w", err)
	}
	if _, err := p.Prepare(ctx, submitPostNoFilesSQL, submitPostNoFilesSQL); err != nil {
		return fmt.Errorf("prepare query 'SubmitPostNoFiles': %w", err)
	}
	return nil
}

// PartialFile represents the Postgres composite type "partial_file".
type PartialFile struct {
	Idx          *int16         `json:"idx"`
	Path         pgtype.Varchar `json:"path"`
	Extension    pgtype.Varchar `json:"extension"`
	Mimetype     pgtype.Varchar `json:"mimetype"`
	Bytes        *int32         `json:"bytes"`
	OriginalName pgtype.Varchar `json:"original_name"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

// newPartialFile creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'partial_file'.
func (tr *typeResolver) newPartialFile() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"partial_file",
		compositeField{name: "idx", typeName: "int2", defaultVal: &pgtype.Int2{}},
		compositeField{name: "path", typeName: "varchar", defaultVal: &pgtype.Varchar{}},
		compositeField{name: "extension", typeName: "varchar", defaultVal: &pgtype.Varchar{}},
		compositeField{name: "mimetype", typeName: "varchar", defaultVal: &pgtype.Varchar{}},
		compositeField{name: "bytes", typeName: "int4", defaultVal: &pgtype.Int4{}},
		compositeField{name: "original_name", typeName: "varchar", defaultVal: &pgtype.Varchar{}},
	)
}

// newPartialFileRaw returns all composite fields for the Postgres composite
// type 'partial_file' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newPartialFileRaw(v PartialFile) []interface{} {
	return []interface{}{
		v.Idx,
		v.Path,
		v.Extension,
		v.Mimetype,
		v.Bytes,
		v.OriginalName,
	}
}

// newPartialFileArray creates a new pgtype.ValueTranscoder for the Postgres
// '_partial_file' array type.
func (tr *typeResolver) newPartialFileArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_partial_file", "partial_file", tr.newPartialFile)
}

// newPartialFileArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_partial_file' to encode query parameters.
func (tr *typeResolver) newPartialFileArrayInit(ps []PartialFile) pgtype.ValueTranscoder {
	dec := tr.newPartialFileArray()
	if err := dec.Set(tr.newPartialFileArrayRaw(ps)); err != nil {
		panic("encode []PartialFile: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_partial_file"}
}

// newPartialFileArrayRaw returns all elements for the Postgres array type '_partial_file'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newPartialFileArrayRaw(vs []PartialFile) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newPartialFileRaw(v)
	}
	return elems
}

const listBoardsSQL = `SELECT board_id, slug, title, tagline
FROM boards
ORDER BY slug, board_id
;`

type ListBoardsRow struct {
	BoardID *int32         `json:"board_id"`
	Slug    pgtype.Varchar `json:"slug"`
	Title   pgtype.Varchar `json:"title"`
	Tagline pgtype.Varchar `json:"tagline"`
}

// ListBoards implements Querier.ListBoards.
func (q *DBQuerier) ListBoards(ctx context.Context) ([]ListBoardsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListBoards")
	rows, err := q.conn.Query(ctx, listBoardsSQL)
	if err != nil {
		return nil, fmt.Errorf("query ListBoards: %w", err)
	}
	defer rows.Close()
	items := []ListBoardsRow{}
	for rows.Next() {
		var item ListBoardsRow
		if err := rows.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
			return nil, fmt.Errorf("scan ListBoards row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListBoards rows: %w", err)
	}
	return items, err
}

// ListBoardsBatch implements Querier.ListBoardsBatch.
func (q *DBQuerier) ListBoardsBatch(batch genericBatch) {
	batch.Queue(listBoardsSQL)
}

// ListBoardsScan implements Querier.ListBoardsScan.
func (q *DBQuerier) ListBoardsScan(results pgx.BatchResults) ([]ListBoardsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListBoardsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListBoardsRow{}
	for rows.Next() {
		var item ListBoardsRow
		if err := rows.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
			return nil, fmt.Errorf("scan ListBoardsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListBoardsBatch rows: %w", err)
	}
	return items, err
}

const showBoardFromIDSQL = `SELECT board_id, slug, title, tagline
FROM boards
WHERE board_id = $1
;`

type ShowBoardFromIDRow struct {
	BoardID int32          `json:"board_id"`
	Slug    pgtype.Varchar `json:"slug"`
	Title   pgtype.Varchar `json:"title"`
	Tagline pgtype.Varchar `json:"tagline"`
}

// ShowBoardFromID implements Querier.ShowBoardFromID.
func (q *DBQuerier) ShowBoardFromID(ctx context.Context, id int32) (ShowBoardFromIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ShowBoardFromID")
	row := q.conn.QueryRow(ctx, showBoardFromIDSQL, id)
	var item ShowBoardFromIDRow
	if err := row.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
		return item, fmt.Errorf("query ShowBoardFromID: %w", err)
	}
	return item, nil
}

// ShowBoardFromIDBatch implements Querier.ShowBoardFromIDBatch.
func (q *DBQuerier) ShowBoardFromIDBatch(batch genericBatch, id int32) {
	batch.Queue(showBoardFromIDSQL, id)
}

// ShowBoardFromIDScan implements Querier.ShowBoardFromIDScan.
func (q *DBQuerier) ShowBoardFromIDScan(results pgx.BatchResults) (ShowBoardFromIDRow, error) {
	row := results.QueryRow()
	var item ShowBoardFromIDRow
	if err := row.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
		return item, fmt.Errorf("scan ShowBoardFromIDBatch row: %w", err)
	}
	return item, nil
}

const showBoardFromSlugSQL = `SELECT board_id, slug, title, tagline
FROM boards
WHERE slug = $1
;`

type ShowBoardFromSlugRow struct {
	BoardID int32          `json:"board_id"`
	Slug    pgtype.Varchar `json:"slug"`
	Title   pgtype.Varchar `json:"title"`
	Tagline pgtype.Varchar `json:"tagline"`
}

// ShowBoardFromSlug implements Querier.ShowBoardFromSlug.
func (q *DBQuerier) ShowBoardFromSlug(ctx context.Context, slug string) (ShowBoardFromSlugRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ShowBoardFromSlug")
	row := q.conn.QueryRow(ctx, showBoardFromSlugSQL, slug)
	var item ShowBoardFromSlugRow
	if err := row.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
		return item, fmt.Errorf("query ShowBoardFromSlug: %w", err)
	}
	return item, nil
}

// ShowBoardFromSlugBatch implements Querier.ShowBoardFromSlugBatch.
func (q *DBQuerier) ShowBoardFromSlugBatch(batch genericBatch, slug string) {
	batch.Queue(showBoardFromSlugSQL, slug)
}

// ShowBoardFromSlugScan implements Querier.ShowBoardFromSlugScan.
func (q *DBQuerier) ShowBoardFromSlugScan(results pgx.BatchResults) (ShowBoardFromSlugRow, error) {
	row := results.QueryRow()
	var item ShowBoardFromSlugRow
	if err := row.Scan(&item.BoardID, &item.Slug, &item.Title, &item.Tagline); err != nil {
		return item, fmt.Errorf("scan ShowBoardFromSlugBatch row: %w", err)
	}
	return item, nil
}

const listActiveBoardThreadsSQL = `SELECT threads.thread_id, threads.created_at, threads.bumped_at, posts.subject, posts.author, posts.body
FROM threads
-- join the thread post:
INNER JOIN posts
ON posts.board_id = threads.board_id
AND posts.thread_id = threads.thread_id
AND posts.post_id = threads.thread_id
WHERE threads.board_id = $1
ORDER BY threads.bumped_at DESC
LIMIT $2
OFFSET $3 
;`

type ListActiveBoardThreadsParams struct {
	BoardID int32
	Limit   int
	Offset  int
}

type ListActiveBoardThreadsRow struct {
	ThreadID  *int             `json:"thread_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	BumpedAt  pgtype.Timestamp `json:"bumped_at"`
	Subject   pgtype.Varchar   `json:"subject"`
	Author    pgtype.Varchar   `json:"author"`
	Body      *string          `json:"body"`
}

// ListActiveBoardThreads implements Querier.ListActiveBoardThreads.
func (q *DBQuerier) ListActiveBoardThreads(ctx context.Context, params ListActiveBoardThreadsParams) ([]ListActiveBoardThreadsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListActiveBoardThreads")
	rows, err := q.conn.Query(ctx, listActiveBoardThreadsSQL, params.BoardID, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query ListActiveBoardThreads: %w", err)
	}
	defer rows.Close()
	items := []ListActiveBoardThreadsRow{}
	for rows.Next() {
		var item ListActiveBoardThreadsRow
		if err := rows.Scan(&item.ThreadID, &item.CreatedAt, &item.BumpedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListActiveBoardThreads row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListActiveBoardThreads rows: %w", err)
	}
	return items, err
}

// ListActiveBoardThreadsBatch implements Querier.ListActiveBoardThreadsBatch.
func (q *DBQuerier) ListActiveBoardThreadsBatch(batch genericBatch, params ListActiveBoardThreadsParams) {
	batch.Queue(listActiveBoardThreadsSQL, params.BoardID, params.Limit, params.Offset)
}

// ListActiveBoardThreadsScan implements Querier.ListActiveBoardThreadsScan.
func (q *DBQuerier) ListActiveBoardThreadsScan(results pgx.BatchResults) ([]ListActiveBoardThreadsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListActiveBoardThreadsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListActiveBoardThreadsRow{}
	for rows.Next() {
		var item ListActiveBoardThreadsRow
		if err := rows.Scan(&item.ThreadID, &item.CreatedAt, &item.BumpedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListActiveBoardThreadsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListActiveBoardThreadsBatch rows: %w", err)
	}
	return items, err
}

const listThreadRecentPostsSQL = `SELECT threads.thread_id, recent_posts.post_id, recent_posts.created_at, recent_posts.subject, recent_posts.author, recent_posts.body
FROM threads
JOIN LATERAL (
  SELECT post_id, created_at, subject, author, body
  FROM posts
  WHERE posts.board_id = threads.board_id
  AND posts.thread_id = threads.thread_id
  AND posts.post_id != threads.thread_id -- ignore the thread post
  ORDER BY posts.post_id
  LIMIT 5
) recent_posts ON TRUE
WHERE threads.board_id = $1
AND threads.thread_id = ANY ($2::BIGINT[])
;`

type ListThreadRecentPostsRow struct {
	ThreadID  *int             `json:"thread_id"`
	PostID    *int             `json:"post_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	Subject   pgtype.Varchar   `json:"subject"`
	Author    pgtype.Varchar   `json:"author"`
	Body      *string          `json:"body"`
}

// ListThreadRecentPosts implements Querier.ListThreadRecentPosts.
func (q *DBQuerier) ListThreadRecentPosts(ctx context.Context, boardID int32, threadIds []int) ([]ListThreadRecentPostsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListThreadRecentPosts")
	rows, err := q.conn.Query(ctx, listThreadRecentPostsSQL, boardID, threadIds)
	if err != nil {
		return nil, fmt.Errorf("query ListThreadRecentPosts: %w", err)
	}
	defer rows.Close()
	items := []ListThreadRecentPostsRow{}
	for rows.Next() {
		var item ListThreadRecentPostsRow
		if err := rows.Scan(&item.ThreadID, &item.PostID, &item.CreatedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListThreadRecentPosts row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadRecentPosts rows: %w", err)
	}
	return items, err
}

// ListThreadRecentPostsBatch implements Querier.ListThreadRecentPostsBatch.
func (q *DBQuerier) ListThreadRecentPostsBatch(batch genericBatch, boardID int32, threadIds []int) {
	batch.Queue(listThreadRecentPostsSQL, boardID, threadIds)
}

// ListThreadRecentPostsScan implements Querier.ListThreadRecentPostsScan.
func (q *DBQuerier) ListThreadRecentPostsScan(results pgx.BatchResults) ([]ListThreadRecentPostsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListThreadRecentPostsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListThreadRecentPostsRow{}
	for rows.Next() {
		var item ListThreadRecentPostsRow
		if err := rows.Scan(&item.ThreadID, &item.PostID, &item.CreatedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListThreadRecentPostsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadRecentPostsBatch rows: %w", err)
	}
	return items, err
}

const showThreadSQL = `SELECT threads.thread_id, threads.created_at, threads.bumped_at, posts.subject, posts.author, posts.body
FROM threads
-- join the thread post:
INNER JOIN posts
ON posts.board_id = threads.board_id
AND posts.thread_id = threads.thread_id
AND posts.post_id = threads.thread_id
WHERE threads.board_id = $1
AND threads.thread_id = $2
;`

type ShowThreadRow struct {
	ThreadID  *int             `json:"thread_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	BumpedAt  pgtype.Timestamp `json:"bumped_at"`
	Subject   pgtype.Varchar   `json:"subject"`
	Author    pgtype.Varchar   `json:"author"`
	Body      *string          `json:"body"`
}

// ShowThread implements Querier.ShowThread.
func (q *DBQuerier) ShowThread(ctx context.Context, boardID int32, threadID int) (ShowThreadRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ShowThread")
	row := q.conn.QueryRow(ctx, showThreadSQL, boardID, threadID)
	var item ShowThreadRow
	if err := row.Scan(&item.ThreadID, &item.CreatedAt, &item.BumpedAt, &item.Subject, &item.Author, &item.Body); err != nil {
		return item, fmt.Errorf("query ShowThread: %w", err)
	}
	return item, nil
}

// ShowThreadBatch implements Querier.ShowThreadBatch.
func (q *DBQuerier) ShowThreadBatch(batch genericBatch, boardID int32, threadID int) {
	batch.Queue(showThreadSQL, boardID, threadID)
}

// ShowThreadScan implements Querier.ShowThreadScan.
func (q *DBQuerier) ShowThreadScan(results pgx.BatchResults) (ShowThreadRow, error) {
	row := results.QueryRow()
	var item ShowThreadRow
	if err := row.Scan(&item.ThreadID, &item.CreatedAt, &item.BumpedAt, &item.Subject, &item.Author, &item.Body); err != nil {
		return item, fmt.Errorf("scan ShowThreadBatch row: %w", err)
	}
	return item, nil
}

const listThreadPostsSQL = `SELECT post_id, created_at, subject, author, body
FROM posts
WHERE posts.board_id = $1
AND posts.thread_id = $2
AND posts.post_id != $2 -- ignore the thread post
ORDER BY posts.post_id
;`

type ListThreadPostsRow struct {
	PostID    *int             `json:"post_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	Subject   pgtype.Varchar   `json:"subject"`
	Author    pgtype.Varchar   `json:"author"`
	Body      *string          `json:"body"`
}

// ListThreadPosts implements Querier.ListThreadPosts.
func (q *DBQuerier) ListThreadPosts(ctx context.Context, boardID int32, threadID int) ([]ListThreadPostsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListThreadPosts")
	rows, err := q.conn.Query(ctx, listThreadPostsSQL, boardID, threadID)
	if err != nil {
		return nil, fmt.Errorf("query ListThreadPosts: %w", err)
	}
	defer rows.Close()
	items := []ListThreadPostsRow{}
	for rows.Next() {
		var item ListThreadPostsRow
		if err := rows.Scan(&item.PostID, &item.CreatedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListThreadPosts row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadPosts rows: %w", err)
	}
	return items, err
}

// ListThreadPostsBatch implements Querier.ListThreadPostsBatch.
func (q *DBQuerier) ListThreadPostsBatch(batch genericBatch, boardID int32, threadID int) {
	batch.Queue(listThreadPostsSQL, boardID, threadID)
}

// ListThreadPostsScan implements Querier.ListThreadPostsScan.
func (q *DBQuerier) ListThreadPostsScan(results pgx.BatchResults) ([]ListThreadPostsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListThreadPostsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListThreadPostsRow{}
	for rows.Next() {
		var item ListThreadPostsRow
		if err := rows.Scan(&item.PostID, &item.CreatedAt, &item.Subject, &item.Author, &item.Body); err != nil {
			return nil, fmt.Errorf("scan ListThreadPostsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadPostsBatch rows: %w", err)
	}
	return items, err
}

const listPostFilesSQL = `SELECT post_id, idx, path, extension, mimetype, bytes, original_name
FROM files
WHERE board_id = $1
AND post_id = ANY ($2::BIGINT[])
ORDER BY post_id, idx
;`

type ListPostFilesRow struct {
	PostID       *int           `json:"post_id"`
	Idx          *int16         `json:"idx"`
	Path         pgtype.Varchar `json:"path"`
	Extension    pgtype.Varchar `json:"extension"`
	Mimetype     pgtype.Varchar `json:"mimetype"`
	Bytes        *int32         `json:"bytes"`
	OriginalName pgtype.Varchar `json:"original_name"`
}

// ListPostFiles implements Querier.ListPostFiles.
func (q *DBQuerier) ListPostFiles(ctx context.Context, boardID int32, postIds []int) ([]ListPostFilesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListPostFiles")
	rows, err := q.conn.Query(ctx, listPostFilesSQL, boardID, postIds)
	if err != nil {
		return nil, fmt.Errorf("query ListPostFiles: %w", err)
	}
	defer rows.Close()
	items := []ListPostFilesRow{}
	for rows.Next() {
		var item ListPostFilesRow
		if err := rows.Scan(&item.PostID, &item.Idx, &item.Path, &item.Extension, &item.Mimetype, &item.Bytes, &item.OriginalName); err != nil {
			return nil, fmt.Errorf("scan ListPostFiles row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListPostFiles rows: %w", err)
	}
	return items, err
}

// ListPostFilesBatch implements Querier.ListPostFilesBatch.
func (q *DBQuerier) ListPostFilesBatch(batch genericBatch, boardID int32, postIds []int) {
	batch.Queue(listPostFilesSQL, boardID, postIds)
}

// ListPostFilesScan implements Querier.ListPostFilesScan.
func (q *DBQuerier) ListPostFilesScan(results pgx.BatchResults) ([]ListPostFilesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListPostFilesBatch: %w", err)
	}
	defer rows.Close()
	items := []ListPostFilesRow{}
	for rows.Next() {
		var item ListPostFilesRow
		if err := rows.Scan(&item.PostID, &item.Idx, &item.Path, &item.Extension, &item.Mimetype, &item.Bytes, &item.OriginalName); err != nil {
			return nil, fmt.Errorf("scan ListPostFilesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListPostFilesBatch rows: %w", err)
	}
	return items, err
}

const listThreadFilesSQL = `SELECT post_id, idx, path, extension, mimetype, bytes, original_name
FROM files
WHERE board_id = $1
AND thread_id = $2
ORDER BY post_id, idx
;`

type ListThreadFilesRow struct {
	PostID       *int           `json:"post_id"`
	Idx          *int16         `json:"idx"`
	Path         pgtype.Varchar `json:"path"`
	Extension    pgtype.Varchar `json:"extension"`
	Mimetype     pgtype.Varchar `json:"mimetype"`
	Bytes        *int32         `json:"bytes"`
	OriginalName pgtype.Varchar `json:"original_name"`
}

// ListThreadFiles implements Querier.ListThreadFiles.
func (q *DBQuerier) ListThreadFiles(ctx context.Context, boardID int32, threadID int) ([]ListThreadFilesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListThreadFiles")
	rows, err := q.conn.Query(ctx, listThreadFilesSQL, boardID, threadID)
	if err != nil {
		return nil, fmt.Errorf("query ListThreadFiles: %w", err)
	}
	defer rows.Close()
	items := []ListThreadFilesRow{}
	for rows.Next() {
		var item ListThreadFilesRow
		if err := rows.Scan(&item.PostID, &item.Idx, &item.Path, &item.Extension, &item.Mimetype, &item.Bytes, &item.OriginalName); err != nil {
			return nil, fmt.Errorf("scan ListThreadFiles row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadFiles rows: %w", err)
	}
	return items, err
}

// ListThreadFilesBatch implements Querier.ListThreadFilesBatch.
func (q *DBQuerier) ListThreadFilesBatch(batch genericBatch, boardID int32, threadID int) {
	batch.Queue(listThreadFilesSQL, boardID, threadID)
}

// ListThreadFilesScan implements Querier.ListThreadFilesScan.
func (q *DBQuerier) ListThreadFilesScan(results pgx.BatchResults) ([]ListThreadFilesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListThreadFilesBatch: %w", err)
	}
	defer rows.Close()
	items := []ListThreadFilesRow{}
	for rows.Next() {
		var item ListThreadFilesRow
		if err := rows.Scan(&item.PostID, &item.Idx, &item.Path, &item.Extension, &item.Mimetype, &item.Bytes, &item.OriginalName); err != nil {
			return nil, fmt.Errorf("scan ListThreadFilesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListThreadFilesBatch rows: %w", err)
	}
	return items, err
}

const showFileSQL = `SELECT extension, path, mimetype, bytes
FROM files
WHERE board_id = $1
AND thread_id = $2
AND post_id = $3
AND idx = $4
;`

type ShowFileParams struct {
	BoardID  int32
	ThreadID int
	PostID   int
	Idx      int16
}

type ShowFileRow struct {
	Extension pgtype.Varchar `json:"extension"`
	Path      pgtype.Varchar `json:"path"`
	Mimetype  pgtype.Varchar `json:"mimetype"`
	Bytes     int32          `json:"bytes"`
}

// ShowFile implements Querier.ShowFile.
func (q *DBQuerier) ShowFile(ctx context.Context, params ShowFileParams) (ShowFileRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ShowFile")
	row := q.conn.QueryRow(ctx, showFileSQL, params.BoardID, params.ThreadID, params.PostID, params.Idx)
	var item ShowFileRow
	if err := row.Scan(&item.Extension, &item.Path, &item.Mimetype, &item.Bytes); err != nil {
		return item, fmt.Errorf("query ShowFile: %w", err)
	}
	return item, nil
}

// ShowFileBatch implements Querier.ShowFileBatch.
func (q *DBQuerier) ShowFileBatch(batch genericBatch, params ShowFileParams) {
	batch.Queue(showFileSQL, params.BoardID, params.ThreadID, params.PostID, params.Idx)
}

// ShowFileScan implements Querier.ShowFileScan.
func (q *DBQuerier) ShowFileScan(results pgx.BatchResults) (ShowFileRow, error) {
	row := results.QueryRow()
	var item ShowFileRow
	if err := row.Scan(&item.Extension, &item.Path, &item.Mimetype, &item.Bytes); err != nil {
		return item, fmt.Errorf("scan ShowFileBatch row: %w", err)
	}
	return item, nil
}

const submitThreadSQL = `WITH
thread AS (
  INSERT INTO threads (board_id, thread_id) VALUES
    ($1, board_post_seq_nextval($1))
  RETURNING thread_id
),
post AS (
  INSERT INTO posts (board_id, thread_id, post_id, subject, author, body) VALUES
    ($1, (SELECT thread_id FROM thread), (SELECT thread_id FROM thread), $2, $3, $4)
  RETURNING post_id
),
files_input AS (
  SELECT $1 AS board_id, (SELECT thread_id FROM thread) AS thread_id, (SELECT thread_id FROM thread) AS post_id, idx, path, extension, mimetype, bytes, original_name
  FROM unnest($5::partial_file[])
),
files AS (
  INSERT INTO files (board_id, thread_id, post_id, idx, path, extension, mimetype, bytes, original_name)
  SELECT *
  FROM files_input
)
SELECT thread_id FROM thread
;`

type SubmitThreadParams struct {
	BoardID      int32
	Subject      pgtype.Varchar
	Author       pgtype.Varchar
	Body         string
	PartialFiles []PartialFile
}

// SubmitThread implements Querier.SubmitThread.
func (q *DBQuerier) SubmitThread(ctx context.Context, params SubmitThreadParams) (*int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SubmitThread")
	row := q.conn.QueryRow(ctx, submitThreadSQL, params.BoardID, params.Subject, params.Author, params.Body, q.types.newPartialFileArrayInit(params.PartialFiles))
	var item *int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query SubmitThread: %w", err)
	}
	return item, nil
}

// SubmitThreadBatch implements Querier.SubmitThreadBatch.
func (q *DBQuerier) SubmitThreadBatch(batch genericBatch, params SubmitThreadParams) {
	batch.Queue(submitThreadSQL, params.BoardID, params.Subject, params.Author, params.Body, q.types.newPartialFileArrayInit(params.PartialFiles))
}

// SubmitThreadScan implements Querier.SubmitThreadScan.
func (q *DBQuerier) SubmitThreadScan(results pgx.BatchResults) (*int, error) {
	row := results.QueryRow()
	var item *int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan SubmitThreadBatch row: %w", err)
	}
	return item, nil
}

const submitPostSQL = `WITH
post AS (
  INSERT INTO posts (board_id, thread_id, post_id, subject, author, body) VALUES
    ($1, $2, board_post_seq_nextval($1), $3, $4, $5)
  RETURNING post_id
),
files_input AS (
  SELECT $1 AS board_id, $2, (SELECT post_id FROM post) AS post_id, idx, path, extension, mimetype, bytes, original_name
  FROM unnest($6::partial_file[])
),
files AS (
  INSERT INTO files (board_id, thread_id, post_id, idx, path, extension, mimetype, bytes, original_name)
  SELECT *
  FROM files_input
)
SELECT post_id FROM post
;`

type SubmitPostParams struct {
	BoardID      int32
	ThreadID     int
	Subject      pgtype.Varchar
	Author       pgtype.Varchar
	Body         string
	PartialFiles []PartialFile
}

// SubmitPost implements Querier.SubmitPost.
func (q *DBQuerier) SubmitPost(ctx context.Context, params SubmitPostParams) (*int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SubmitPost")
	row := q.conn.QueryRow(ctx, submitPostSQL, params.BoardID, params.ThreadID, params.Subject, params.Author, params.Body, q.types.newPartialFileArrayInit(params.PartialFiles))
	var item *int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query SubmitPost: %w", err)
	}
	return item, nil
}

// SubmitPostBatch implements Querier.SubmitPostBatch.
func (q *DBQuerier) SubmitPostBatch(batch genericBatch, params SubmitPostParams) {
	batch.Queue(submitPostSQL, params.BoardID, params.ThreadID, params.Subject, params.Author, params.Body, q.types.newPartialFileArrayInit(params.PartialFiles))
}

// SubmitPostScan implements Querier.SubmitPostScan.
func (q *DBQuerier) SubmitPostScan(results pgx.BatchResults) (*int, error) {
	row := results.QueryRow()
	var item *int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan SubmitPostBatch row: %w", err)
	}
	return item, nil
}

const submitPostNoFilesSQL = `INSERT INTO posts (board_id, thread_id, post_id, subject, author, body) VALUES
    ($1, $2, board_post_seq_nextval($1), $3, $4, $5)
  RETURNING post_id
;`

type SubmitPostNoFilesParams struct {
	BoardID  int32
	ThreadID int
	Subject  pgtype.Varchar
	Author   pgtype.Varchar
	Body     string
}

// SubmitPostNoFiles implements Querier.SubmitPostNoFiles.
func (q *DBQuerier) SubmitPostNoFiles(ctx context.Context, params SubmitPostNoFilesParams) (int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SubmitPostNoFiles")
	row := q.conn.QueryRow(ctx, submitPostNoFilesSQL, params.BoardID, params.ThreadID, params.Subject, params.Author, params.Body)
	var item int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query SubmitPostNoFiles: %w", err)
	}
	return item, nil
}

// SubmitPostNoFilesBatch implements Querier.SubmitPostNoFilesBatch.
func (q *DBQuerier) SubmitPostNoFilesBatch(batch genericBatch, params SubmitPostNoFilesParams) {
	batch.Queue(submitPostNoFilesSQL, params.BoardID, params.ThreadID, params.Subject, params.Author, params.Body)
}

// SubmitPostNoFilesScan implements Querier.SubmitPostNoFilesScan.
func (q *DBQuerier) SubmitPostNoFilesScan(results pgx.BatchResults) (int, error) {
	row := results.QueryRow()
	var item int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan SubmitPostNoFilesBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
